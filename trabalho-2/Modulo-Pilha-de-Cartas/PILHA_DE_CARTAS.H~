#if ! defined( PILHA_DE_CARTAS_ )
#define PILHA_DE_CARTAS_
/***************************************************************************
*
*  $MCD Módulo de definição: PIL  Pilha de Cartas
*
*  Arquivo gerado:              PIL.H
*  Letras identificadoras:      PIL
*
*  Autores: Eric Grinstein,
*           Jordana Mecler,
*	    Leonardo Wajnsztok
*
*
*  $ED Descrição do módulo
*     Cria pilha homogênea armazenadora de tipo cartas de baralho.
*     O módulo permite a criação de múltiplas pilhas.
*   
***************************************************************************/
 
#if defined( PILHA_DE_CARTAS_OWN )
   #define PILHA_DE_CARTAS_EXT
#else
   #define PILHA_DE_CARTAS_EXT extern
#endif

/***** Declarações exportadas pelo módulo *****/

/* Tipo referência para uma lista */

typedef struct PIL_tagPilha de Cartas * LIS_tppLista ;


/***********************************************************************
*
*  $TC Tipo de dados: PIL Condições de retorno
*
*
*  $ED Descrição do tipo
*     Condições de retorno das funções da lista
*
***********************************************************************/

   typedef enum {

         PIL_CondRetOK ,
               /* Concluiu corretamente */

         PIL_CondRetPilha de CartasVazia ,
               /* A lista não contém elementos */

         PIL_CondRetFimPilha de Cartas ,
               /* Foi atingido o fim de lista */

         PIL_CondRetNaoAchou ,
               /* Não encontrou o valor procurado */

         PIL_CondRetFaltouMemoria
               /* Faltou memória ao tentar criar um elemento de lista */

   } PIL_tpCondRet ;


/***********************************************************************
*
*  $FC Função: PIL  &Criar lista
*
*  $ED Descrição da função
*     Cria uma lista genérica .
*     Os possíveis tipos são desconhecidos a priori.
*     A tipagem é implicita.
*     Não existe identificador de tipo associado à lista.
*
*  $EP Parâmetros
*     ExcluirValor  - ponteiro para a função que processa a
*                     exclusão do valor referenciado pelo elemento
*                     a ser excluído.
*                     Ver descrição do módulo.
*
*  $FV Valor retornado
*     Se executou corretamente retorna o ponteiro para a lista.
*     Este ponteiro será utilizado pelas funções que manipulem esta lista.
*
*     Se ocorreu algum erro, por exemplo falta de memória ou dados errados,
*     a função retornará NULL.
*     Não será dada mais informação quanto ao problema ocorrido.
*
***********************************************************************/

   PIL_tpCondRet LIS_CriarPilha de Cartas( LIS_tppLista * pLista ,
             void   ( * ExcluirValor ) ( void * pDado ) ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Destruir lista
*
*  $ED Descrição da função
*     Destrói a lista fornecida.
*     O parâmetro ponteiro para a lista não é modificado.
*     Se ocorrer algum erro durante a destruição, a lista resultará
*     estruturalmente incorreta.
*     OBS. não existe previsão para possíveis falhas de execução.
*
*  $FV Valor retornado
*     PIL_CondRetOK    - destruiu sem problemas
*
***********************************************************************/

   void PIL_DestruirPilha de Cartas( LIS_tppLista pLista ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Esvaziar lista
*
*  $ED Descrição da função
*     Elimina todos os elementos, sem contudo eliminar a lista
*
*  $EP Parâmetros
*     pPilha de Cartas - ponteiro para a lista a ser esvaziada
*
***********************************************************************/

   void PIL_EsvaziarPilha de Cartas( LIS_tppLista pLista ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Inserir elemento antes
*
*  $ED Descrição da função
*     Insere novo elemento antes do elemento corrente.
*     Caso a lista esteja vazia, insere o primeiro elemento da lista.
*
*  $EP Parâmetros
*     pPilha de Cartas - ponteiro para a lista onde deve ser inserido o elemento
*     pValor - ponteiro para o valor do novo elemento
*              Pode ser NULL
*
*  $FV Valor retornado
*     PIL_CondRetOK
*     PIL_CondRetFaltouMemoria
*
***********************************************************************/

   PIL_tpCondRet LIS_InserirElementoAntes( LIS_tppPilha de Cartas pLista ,
                                           void * pValor        ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Inserir elemento após
*
*  $ED Descrição da função
*     Insere novo elemento apás o elemento corrente.
*     Caso a lista esteja vazia, insere o primeiro elemento da lista.
*
*  $EP Parâmetros
*     Parâmetros
*        pPilha de Cartas - ponteiro para a lista onde deve ser inserido o elemento
*        pValor - ponteiro para o valor do novo elemento
*                 Pode ser NULL
*           
*
*  $FV Valor retornado
*     Valor retornado
*        PIL_CondRetOK
*        PIL_CondRetFaltouMemoria
*
***********************************************************************/

   PIL_tpCondRet LIS_InserirElementoApos( LIS_tppPilha de Cartas pLista ,
                                          void * pValor        )
       ;


/***********************************************************************
*
*  $FC Função: PIL  &Excluir elemento
*
*  $ED Descrição da função
*     Exclui o elemento corrente da lista dada.
*     Se existir o elemento aa esquerda do corrente será o novo corrente.
*     Se não existir e existir o elemento à direita, este se tornará corrente.
*     Se este também não existir a lista tornou-se vazia.
*
*  $EP Parâmetros
*     pPilha de Cartas    - ponteiro para a lista na qual deve excluir.
*
*  $FV Valor retornado
*     PIL_CondRetOK
*     PIL_CondRetPilha de CartasVazia
*
***********************************************************************/

   PIL_tpCondRet LIS_ExcluirElemento( LIS_tppPilha de Cartas pLista ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Obter referência para o valor contido no elemento
*
*  $ED Descrição da função
*     Obtem a referência para o valor contido no elemento corrente da lista
*
*  $EP Parâmetros
*     pPilha de Cartas - ponteiro para a lista de onde se quer o valor
*
*  $FV Valor retornado
*     não NULL - se o elemento corrente existe
*     NULL     - se a lista estiver vazia
*                Pode retornar NULL se o valor inserido no elemento for NULL.
*
***********************************************************************/

   void * PIL_ObterValor( LIS_tppPilha de Cartas pLista ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Ir para o elemento inicial
*
*  $ED Descrição da função
*     Torna corrente o primeiro elemento da lista.
*     Faz nada se a lista está vazia.
*
*  $EP Parâmetros
*     pPilha de Cartas - ponteiro para a lista a manipular
*
***********************************************************************/

   void IrInicioPilha de Cartas( PIL_tppLista pLista ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Ir para o elemento final
*
*  $ED Descrição da função
*     Torna corrente o elemento final da lista.
*     Faz nada se a lista está vazia.
*
*  $EP Parâmetros
*     pPilha de Cartas - ponteiro para a lista a manipular
*
***********************************************************************/

   void IrFinalPilha de Cartas( PIL_tppLista pLista ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Avançar elemento
*
*  $ED Descrição da função
*     Avança o elemento corrente numElem elementos na lista
*     Se numElem for positivo avança em direção ao final
*     Se numElem for negativo avança em direção ao início
*     numElem pode ser maior do que o númro de elementos existentes na
*               direção desejada
*     Se numElem for zero somente verifica se a lista está vazia
*
*  $EP Parâmetros
*     pPilha de Cartas  - ponteiro para a lista a ser manipulada
*     numElem - o número de elementos a andar
*
*  $FV Valor retornado
*     CondRetOK         - se numElem elementos tiverem sido andados
*     CondRetFimPilha de Cartas   - se encontrou o fim da lista antes de andar numElem
*                         elementos
*     CondRetPilha de CartasVazia - se a lista está vazia
*
***********************************************************************/

   PIL_tpCondRet LIS_AvancarElementoCorrente( LIS_tppPilha de Cartas pLista ,
                                              int numElem ) ;


/***********************************************************************
*
*  $FC Função: PIL  &Procurar elemento contendo valor
*
*  $ED Descrição da função
*     Procura o elemento que referencia o valor dado.
*     A função compara ponteiro e não conteúdo apontado.
*
*  $EP Parâmetros
*     pPilha de Cartas  - ponteiro para a lista onde procura
*     pValor  - ponteiro para o valor procurado
*               Pode ser NULL
*
*  $FV Valor retornado
*     PIL_CondRetOK  - se encontrou.
*                      O elemento corrente é o primeiro elemento do
*                      elemento corrente inclusive para o fim da lista
*                      e que contém o ponteiro procurado
*
*     PIL_CondRetNaoEncontrou - se o ponteiro não foi encontrado
*                      O elemento corrente continua o mesmo
*     PIL_CondRetPilha de CartasVazia   - se a lista estiver vazia
*
***********************************************************************/

   PIL_tpCondRet LIS_ProcurarValor( LIS_tppPilha de Cartas pLista ,
                                    void * pValor        ) ;

#undef PILHA_DE_CARTAS_EXT

/********** Fim do módulo de definição: PIL  Pilha de Cartas  **********/

#else
#endif
